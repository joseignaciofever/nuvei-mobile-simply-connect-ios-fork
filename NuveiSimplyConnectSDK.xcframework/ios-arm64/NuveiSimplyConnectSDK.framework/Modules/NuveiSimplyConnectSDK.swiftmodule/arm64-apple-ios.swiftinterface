// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NuveiSimplyConnectSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import CommonCrypto
import Compression
import CoreLocation
import CoreTelephony
import DeveloperToolsSupport
import Foundation
import JOSESwift
@_exported import NuveiSimplyConnectSDK
import PassKit
import Security
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum NVFailure : Swift.Error {
  case unknown, invalidInput([NuveiSimplyConnectSDK.InputError]), notSetup, `internal`(Swift.Int, Swift.String, [Swift.String : Any]?)
  public var code: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
  public var raw: [Swift.String : Any]? {
    get
  }
  public var transactionId: Swift.String? {
    get
  }
}
public class NuveiToolbarCustomization : NuveiSimplyConnectSDK.NuveiBaseCustomization {
  public init(headerText: Swift.String = "SECURE CHECKOUT", textFont: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 22), textColor: UIKit.UIColor = .white, backgroundColor: UIKit.UIColor = .nuveiDefaultColor)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NuveiFields {
  public static var customization: NuveiSimplyConnectSDK.NuveiFieldCustomization?
  public static func setup(environment: NuveiSimplyConnectSDK.NuveiSimplyConnect.Environment = .production, customization: NuveiSimplyConnectSDK.NuveiFieldCustomization = NuveiFieldCustomization())
  public static func createCreditCardField() throws -> NuveiSimplyConnectSDK.NuveiCreditCardField
  @objc deinit
}
public enum NuveiButtonType {
  case submit
  case `continue`
  case next
  case cancel
  case resend
  case close
  public var string: Swift.String {
    get
  }
  public static func == (a: NuveiSimplyConnectSDK.NuveiButtonType, b: NuveiSimplyConnectSDK.NuveiButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class NuveiButtonCustomization : NuveiSimplyConnectSDK.NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 17), textColor: UIKit.UIColor = .black, backgroundColor: UIKit.UIColor = .white, cornerRadius: Swift.Int = 0)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class JWEHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public class NVBillingAddress : Swift.Encodable, Swift.Decodable {
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let country: Swift.String?
  final public let state: Swift.String?
  final public let county: Swift.String?
  final public let city: Swift.String?
  final public let address: Swift.String?
  final public let addressLine2: Swift.String?
  final public let addressLine3: Swift.String?
  final public let zip: Swift.String?
  final public let addressMatch: Swift.String?
  final public let email: Swift.String?
  final public let phone: Swift.String?
  final public let cell: Swift.String?
  final public let homePhone: Swift.String?
  final public let workPhone: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, country: Swift.String? = nil, state: Swift.String? = nil, county: Swift.String? = nil, city: Swift.String? = nil, address: Swift.String? = nil, addressLine2: Swift.String? = nil, addressLine3: Swift.String? = nil, zip: Swift.String? = nil, addressMatch: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, cell: Swift.String? = nil, homePhone: Swift.String? = nil, workPhone: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class NVShippingAddress : Swift.Encodable, Swift.Decodable {
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let country: Swift.String?
  final public let state: Swift.String?
  final public let county: Swift.String?
  final public let city: Swift.String?
  final public let address: Swift.String?
  final public let addressLine2: Swift.String?
  final public let addressLine3: Swift.String?
  final public let zip: Swift.String?
  final public let addressMatch: Swift.String?
  final public let email: Swift.String?
  final public let phone: Swift.String?
  final public let cell: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, country: Swift.String? = nil, state: Swift.String? = nil, county: Swift.String? = nil, city: Swift.String? = nil, address: Swift.String? = nil, addressLine2: Swift.String? = nil, addressLine3: Swift.String? = nil, zip: Swift.String? = nil, addressMatch: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, cell: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, message: "Use `NVInput` instead")
public typealias Authenticate3dInput = NuveiSimplyConnectSDK.NVInput
@available(*, deprecated, message: "Use `NVUserDetails` instead")
public typealias UserDetails = NuveiSimplyConnectSDK.NVUserDetails
@available(*, deprecated, message: "Use `NVMerchantDetails` instead")
public typealias MerchantDetails = NuveiSimplyConnectSDK.NVMerchantDetails
@available(*, deprecated, message: "Use `NVDynamicDescriptor` instead")
public typealias DynamicDescriptor = NuveiSimplyConnectSDK.NVDynamicDescriptor
public struct NVInput : Swift.Encodable, Swift.Decodable {
  public let sessionToken: Swift.String
  public let merchantId: Swift.String
  public let merchantSiteId: Swift.String
  public let applePayMerchantId: Swift.String
  public let applePayMerchantName: Swift.String
  public let currency: Swift.String
  public let amount: Swift.String
  public let paymentOption: NuveiSimplyConnectSDK.NVPaymentOption
  public let userTokenId: Swift.String?
  public let clientUniqueId: Swift.String?
  public let clientRequestId: Swift.String?
  public let customData: Swift.String?
  public let billingAddress: NuveiSimplyConnectSDK.NVBillingAddress?
  public let shippingAddress: NuveiSimplyConnectSDK.NVShippingAddress?
  public let userDetails: NuveiSimplyConnectSDK.NVUserDetails?
  public let merchantDetails: NuveiSimplyConnectSDK.NVMerchantDetails?
  public let countryCode: Swift.String?
  public let dynamicDescriptor: NuveiSimplyConnectSDK.NVDynamicDescriptor?
  public let timeout: Swift.Int
  public let requestTimeout: Swift.Int
  public init(sessionToken: Swift.String, merchantId: Swift.String, applePayMerchantId: Swift.String, applePayMerchantName: Swift.String, merchantSiteId: Swift.String, currency: Swift.String, amount: Swift.String, paymentOption: NuveiSimplyConnectSDK.NVPaymentOption, userTokenId: Swift.String? = nil, clientUniqueId: Swift.String? = nil, clientRequestId: Swift.String? = nil, customData: Swift.String? = nil, billingAddress: NuveiSimplyConnectSDK.NVBillingAddress? = nil, shippingAddress: NuveiSimplyConnectSDK.NVShippingAddress? = nil, userDetails: NuveiSimplyConnectSDK.NVUserDetails? = nil, merchantDetails: NuveiSimplyConnectSDK.NVMerchantDetails? = nil, countryCode: Swift.String? = nil, dynamicDescriptor: NuveiSimplyConnectSDK.NVDynamicDescriptor? = nil, timeout: Swift.Int = 10, requestTimeout: Swift.Int = 40)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVUserDetails : Swift.Encodable, Swift.Decodable {
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let address: Swift.String?
  public let zip: Swift.String?
  public let state: Swift.String?
  public let email: Swift.String?
  public let phone: Swift.String?
  public let city: Swift.String?
  public let country: Swift.String?
  public let county: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, address: Swift.String? = nil, zip: Swift.String? = nil, state: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, city: Swift.String? = nil, country: Swift.String? = nil, county: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVMerchantDetails : Swift.Encodable, Swift.Decodable {
  public let customField1: Swift.String?
  public let customField2: Swift.String?
  public let customField3: Swift.String?
  public let customField4: Swift.String?
  public let customField5: Swift.String?
  public let customField6: Swift.String?
  public let customField7: Swift.String?
  public let customField8: Swift.String?
  public let customField9: Swift.String?
  public let customField10: Swift.String?
  public let customField11: Swift.String?
  public let customField12: Swift.String?
  public let customField13: Swift.String?
  public let customField14: Swift.String?
  public let customField15: Swift.String?
  public init(customField1: Swift.String? = nil, customField2: Swift.String? = nil, customField3: Swift.String? = nil, customField4: Swift.String? = nil, customField5: Swift.String? = nil, customField6: Swift.String? = nil, customField7: Swift.String? = nil, customField8: Swift.String? = nil, customField9: Swift.String? = nil, customField10: Swift.String? = nil, customField11: Swift.String? = nil, customField12: Swift.String? = nil, customField13: Swift.String? = nil, customField14: Swift.String? = nil, customField15: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVDynamicDescriptor : Swift.Encodable, Swift.Decodable {
  public let merchantName: Swift.String?
  public let merchantPhone: Swift.String?
  public init(merchantName: Swift.String? = nil, merchantPhone: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum InputError : Swift.Int, Swift.Codable {
  case numberEmpty
  case creditCardInvalid
  case expiryEmpty
  case expiryInvalid
  case cvvEmpty
  case cvvInvalid
  case holderNameEmpty
  case holderNameInvalid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct EcdhEsJweHeader : NuveiSimplyConnectSDK.JSONWebEncryptionHeader {
  public init(alg: Swift.String, enc: Swift.String)
  public init(parameters: [Swift.String : Any]) throws
  public init(jsonData: Foundation.Data) throws
  public init(b64uData: Foundation.Data) throws
  public init(cloneFrom: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader) throws
  public func jsonSerializedData() -> Foundation.Data
  public func allParameters() -> [Swift.String : Any]
}
extension NuveiSimplyConnectSDK.EcdhEsJweHeader {
  public var alg: Swift.String {
    get
    set
  }
  public var enc: Swift.String {
    get
    set
  }
  public var epk: JOSESwift.ECPublicKey? {
    get
    set
  }
  public var apu: Swift.String? {
    get
    set
  }
  public var apv: Swift.String? {
    get
    set
  }
}
extension NuveiSimplyConnectSDK.EcdhEsJweHeader {
  public subscript(index: Swift.String) -> Any? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NuveiField : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var customization: NuveiSimplyConnectSDK.NuveiFieldCustomization {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(customization: NuveiSimplyConnectSDK.NuveiFieldCustomization)
  @objc deinit
}
public protocol JWEEncryptor {
  func encrypt(plaintext: Foundation.Data, key: any JOSESwift.JWK, header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader, options: [Swift.String : Any]) throws -> (header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader, encryptedKey: Foundation.Data, iv: Foundation.Data, ciphertext: Foundation.Data, tag: Foundation.Data)
  func decrypt(key: any JOSESwift.JWK, header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader, encryptedKey: Foundation.Data, iv: Foundation.Data, ciphertext: Foundation.Data, tag: Foundation.Data, aad: Foundation.Data) throws -> Foundation.Data
}
public class NuveiTextBoxCustomization : NuveiSimplyConnectSDK.NuveiBaseCustomization {
  public init(backgroundColor: UIKit.UIColor = .white, textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), textColor: UIKit.UIColor = .black, borderColor: UIKit.UIColor = .black, cornerRadius: Swift.Int = 0, borderWidth: Swift.Int = 1)
  @objc deinit
}
public class NuveiLabelCustomization : NuveiSimplyConnectSDK.NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), textColor: UIKit.UIColor = .black, headingTextFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), headingTextColor: UIKit.UIColor = .white)
  @objc deinit
}
@available(*, deprecated, message: "Use `NVAuthenticate3dOutput` instead")
public typealias Authenticate3dOutput = NuveiSimplyConnectSDK.NVAuthenticate3dOutput
public class NVAuthenticate3dOutput : NuveiSimplyConnectSDK.NVOutput {
  final public let cavv: Swift.String?
  final public let eci: Swift.String?
  final public let xid: Swift.String?
  final public let dsTransID: Swift.String?
  final public let ccTempToken: Swift.String?
  public init(result: NuveiSimplyConnectSDK.NVOutput.NVOutputResult, userPaymentOptionId: Swift.String? = nil, cavv: Swift.String? = nil, eci: Swift.String? = nil, xid: Swift.String? = nil, dsTransID: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, ccTempToken: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil)
  @objc deinit
}
public protocol JSONWebEncryption {
  var header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader { get }
  var encryptedKey: Foundation.Data { get }
  var initializationVector: Foundation.Data { get }
  var ciphertext: Foundation.Data { get }
  var authenticationTag: Foundation.Data { get }
  var compactSerializedString: Swift.String { get }
  var compactSerializedData: Foundation.Data { get }
  var additionalAuthenticatedData: Foundation.Data { get }
  func decrypt(key: any JOSESwift.JWK) throws -> Foundation.Data
}
extension JOSESwift.ECCurveType {
  public var bitLength: Swift.Int {
    get
  }
}
extension JOSESwift.ECPrivateKey {
  public func getPublic() -> JOSESwift.ECPublicKey
  public func isCorrespondWith(_ key: JOSESwift.ECPublicKey) -> Swift.Bool
}
extension JOSESwift.ECPrivateKey {
  public func getPrivate() -> JOSESwift.ECPrivateKey
}
public func generateECKeyPair(curveType: JOSESwift.ECCurveType) throws -> JOSESwift.ECKeyPair
extension JOSESwift.JWK {
  public func dictionarized() -> [Swift.String : Swift.String]
  public init(dictionary: [Swift.String : Any]) throws
}
public class NVOutput {
  public enum NVOutputResult : Swift.String {
    case approved, declined, cancelled, error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum NVOutputInternalResult : Swift.String {
    case approved, declined, redirect, cancelled, error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let result: NuveiSimplyConnectSDK.NVOutput.NVOutputResult
  final public let userPaymentOptionId: Swift.String?
  final public let ccCardNumber: Swift.String?
  final public let bin: Swift.String?
  final public let last4Digits: Swift.String?
  final public let ccExpMonth: Swift.String?
  final public let ccExpYear: Swift.String?
  final public let transactionId: Swift.String?
  final public let threeDReason: Swift.String?
  final public let threeDReasonId: Swift.String?
  final public let challengeCancelReasonId: Swift.String?
  final public let challengeCancelReason: Swift.String?
  final public let isLiabilityOnIssuer: Swift.Bool?
  final public let challengePreferenceReason: Swift.String?
  final public let errorCode: Swift.Int?
  final public let errorDescription: Swift.String?
  final public let rawResult: [Swift.String : Any]?
  public init(result: NuveiSimplyConnectSDK.NVOutput.NVOutputResult, userPaymentOptionId: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NuveiCreditCardField : NuveiSimplyConnectSDK.NuveiField {
  public typealias ValidationCompletion = (Swift.String?, [NuveiSimplyConnectSDK.InputError]?) -> ()
  public typealias TokenizationCompletion = (Swift.String?, (any Swift.Error)?) -> ()
  @_Concurrency.MainActor @preconcurrency public var onInputUpdated: ((_ hasFocus: Swift.Bool) -> ())?
  @_Concurrency.MainActor @preconcurrency public var onInputValidated: (([NuveiSimplyConnectSDK.InputError]?) -> ())?
  @objc deinit
}
extension NuveiSimplyConnectSDK.NuveiCreditCardField {
  @_Concurrency.MainActor @preconcurrency public func validate(callback: (Swift.String?, [NuveiSimplyConnectSDK.InputError]?) -> ())
  @_Concurrency.MainActor @preconcurrency public func tokenize(transactionDetails: NuveiSimplyConnectSDK.CheckoutTransactionDetails, additionalParams: [Swift.String : Any] = [:], callback: @escaping (Swift.String?, Swift.String?) -> ())
  @_Concurrency.MainActor @preconcurrency public func createPayment(viewController: UIKit.UIViewController, transactionDetails: NuveiSimplyConnectSDK.CheckoutTransactionDetails, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, callback: @escaping (NuveiSimplyConnectSDK.NVCreatePaymentOutput) -> (), declineFallbackDecision: NuveiSimplyConnectSDK.NuveiSimplyConnect.DeclineFallbackDecisionCallback?)
}
extension UIKit.UIColor {
  public static var nuveiDefaultColor: UIKit.UIColor
}
@available(*, deprecated, message: "Use `NVPaymentOption` instead")
public typealias PaymentOption = NuveiSimplyConnectSDK.NVPaymentOption
@available(*, deprecated, message: "Use `NVCardDetails` instead")
public typealias CardDetails = NuveiSimplyConnectSDK.NVCardDetails
public struct NVPaymentOption : Swift.Encodable, Swift.Decodable {
  public let userPaymentOptionId: Swift.String?
  public let paymentMethod: Swift.String?
  public let card: NuveiSimplyConnectSDK.NVCardDetails?
  public let savePm: Swift.Bool?
  public let alternativePaymentMethod: NuveiSimplyConnectSDK.NVPaymentOption.AlternativePaymentMethod?
  public init(paymentMethod: Swift.String? = nil, userPaymentOptionId: Swift.String? = nil, card: NuveiSimplyConnectSDK.NVCardDetails? = nil, saveMethod: Swift.Bool? = nil, alternativePaymentMethod: NuveiSimplyConnectSDK.NVPaymentOption.AlternativePaymentMethod? = nil) throws
  public struct AlternativePaymentMethod : Swift.Encodable, Swift.Decodable {
    public let paymentMethod: Swift.String?
    public let fields: [Swift.String : Swift.String]?
    public init(paymentMethod: Swift.String?, fields: [Swift.String : Swift.String]?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NVCardDetails : Swift.Encodable, Swift.Decodable {
  public let cardNumber: Swift.String?
  public let cardHolderName: Swift.String?
  public let CVV: Swift.String?
  public let expirationMonth: Swift.String?
  public let expirationYear: Swift.String?
  public let externalToken: NuveiSimplyConnectSDK.NVCardDetails.ExternalToken?
  public init(cvv: Swift.String? = nil)
  public init(cardNumber: Swift.String? = nil, cardHolderName: Swift.String? = nil, cvv: Swift.String? = nil, expirationMonth: Swift.String?, expirationYear: Swift.String?, externalToken: NuveiSimplyConnectSDK.NVCardDetails.ExternalToken? = nil)
  public struct ExternalToken : Swift.Encodable, Swift.Decodable {
    public let externalTokenProvider: Swift.String
    public let mobileToken: Swift.String
    public init(externalTokenProvider: Swift.String, mobileToken: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String {
  public var onlyDigits: Swift.String {
    get
  }
}
public struct CheckoutTransactionDetails : Swift.Codable {
  public init(sessionToken: Swift.String, merchantId: Swift.String, applePayMerchantId: Swift.String, applePayMerchantName: Swift.String, merchantSiteId: Swift.String, currency: Swift.String, amount: Swift.String, userTokenId: Swift.String?, clientUniqueId: Swift.String?, clientRequestId: Swift.String?, customData: Swift.String?, billingAddress: NuveiSimplyConnectSDK.NVBillingAddress?, shippingAddress: NuveiSimplyConnectSDK.NVShippingAddress?, userDetails: NuveiSimplyConnectSDK.NVUserDetails?, merchantDetails: NuveiSimplyConnectSDK.NVMerchantDetails?, dynamicDescriptor: NuveiSimplyConnectSDK.NVDynamicDescriptor?, paymentOption: NuveiSimplyConnectSDK.NVPaymentOption?, countryCode: Swift.String?, forceWebChallenge: Swift.Bool)
  public static func transactionDetails(from object: NuveiSimplyConnectSDK.NVInput, additionalParams: [Swift.String : Any]?, forceWebChallenge: Swift.Bool) -> NuveiSimplyConnectSDK.CheckoutTransactionDetails
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CreditCardInput : Swift.Codable {
  public var number: Swift.String
  public var expiry: Swift.String
  public var cvv: Swift.String
  public var cardHolderName: Swift.String
  public var shouldSaveCard: Swift.Bool
  public var indexPath: Foundation.IndexPath?
  public var parsedInfo: NuveiSimplyConnectSDK.CreditCardInput.ParsedInfo
  @_hasMissingDesignatedInitializers public class ParsedInfo : Swift.Codable {
    public var errors: [NuveiSimplyConnectSDK.InputError]?
    public var icon: Swift.String?
    public var cvvLength: Swift.Int?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class NuveiFieldCustomization : NuveiSimplyConnectSDK.NuveiUICustomization {
  public init(logo: UIKit.UIImage? = nil, toolbarCustomization: NuveiSimplyConnectSDK.NuveiToolbarCustomization = NuveiToolbarCustomization(), labelCustomization: NuveiSimplyConnectSDK.NuveiLabelCustomization = NuveiLabelCustomization(), textBoxCustomization: NuveiSimplyConnectSDK.NuveiTextBoxCustomization = NuveiTextBoxCustomization(), errorLabelCustomization: NuveiSimplyConnectSDK.NuveiLabelCustomization = NuveiLabelCustomization(textColor: .red), placeholderCustomization: NuveiSimplyConnectSDK.NuveiTextBoxCustomization = NuveiTextBoxCustomization(), backgroundColor: UIKit.UIColor = .white, borderColor: UIKit.UIColor = .black, cornerRadius: Swift.Int = 0, borderWidth: Swift.Int = 1)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CompletionEvent {
  @objc deinit
}
public struct EcdhEsJwe : NuveiSimplyConnectSDK.JSONWebEncryption {
  public let header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader
  public let encryptedKey: Foundation.Data
  public let initializationVector: Foundation.Data
  public var ciphertext: Foundation.Data
  public var authenticationTag: Foundation.Data
  public var additionalAuthenticatedData: Foundation.Data
  public var compactSerializedString: Swift.String {
    get
  }
  public var compactSerializedData: Foundation.Data {
    get
  }
  public func decrypt(key: any JOSESwift.JWK) throws -> Foundation.Data
  public func decrypt(privKeyJwkJson: Foundation.Data) throws -> Foundation.Data
  public func decrypt(privKeyJwkJson: Swift.String) throws -> Foundation.Data
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Foundation.Data, header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader, options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Swift.String, header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader, options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKey: JOSESwift.ECPublicKey, header: any NuveiSimplyConnectSDK.JSONWebEncryptionHeader, options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Foundation.Data, headerDic: [Swift.String : Any] = [:], options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Swift.String, headerDic: [Swift.String : Any] = [:], options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKey: JOSESwift.ECPublicKey, headerDic: [Swift.String : Any] = [:], options: [Swift.String : Any] = [:]) throws
  public init(compactSerializedString: Swift.String) throws
  public init(compactSerializedData: Foundation.Data) throws
}
public class NuveiUICustomization {
  public init(logo: UIKit.UIImage? = nil, toolbarCustomization: NuveiSimplyConnectSDK.NuveiToolbarCustomization = NuveiToolbarCustomization(), labelCustomization: NuveiSimplyConnectSDK.NuveiLabelCustomization = NuveiLabelCustomization(), textBoxCustomization: NuveiSimplyConnectSDK.NuveiTextBoxCustomization = NuveiTextBoxCustomization())
  public func setButtonCustomization(_ buttonCustomization: NuveiSimplyConnectSDK.NuveiButtonCustomization, for buttonType: NuveiSimplyConnectSDK.NuveiButtonType)
  public func buttonCustomization(for buttonType: NuveiSimplyConnectSDK.NuveiButtonType) -> NuveiSimplyConnectSDK.NuveiButtonCustomization
  public static var defaultCheckoutToolbarColor: UIKit.UIColor? {
    get
  }
  public static var defaultCheckoutToolbarLogo: UIKit.UIImage? {
    get
  }
  @objc deinit
}
extension Swift.Dictionary {
  public subscript(nested keyPath: Swift.String) -> Any? {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CheckoutViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public init(transactionDetails: NuveiSimplyConnectSDK.CheckoutTransactionDetails)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension NuveiSimplyConnectSDK.CheckoutViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension NuveiSimplyConnectSDK.CheckoutViewController : PassKit.PKPaymentAuthorizationViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func paymentAuthorizationViewControllerDidFinish(_ controller: PassKit.PKPaymentAuthorizationViewController)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func paymentAuthorizationViewController(_ controller: PassKit.PKPaymentAuthorizationViewController, didAuthorizePayment payment: PassKit.PKPayment, handler completion: @escaping (PassKit.PKPaymentAuthorizationResult) -> Swift.Void)
}
public protocol JSONWebEncryptionHeader {
  var alg: Swift.String { get }
  var enc: Swift.String { get }
  var epk: JOSESwift.ECPublicKey? { get }
  var apu: Swift.String? { get }
  var apv: Swift.String? { get }
  subscript(index: Swift.String) -> Any? { get }
  func jsonSerializedData() -> Foundation.Data
  func allParameters() -> [Swift.String : Any]
}
@_inheritsConvenienceInitializers public class NVCreatePaymentOutput : NuveiSimplyConnectSDK.NVOutput {
  override public init(result: NuveiSimplyConnectSDK.NVOutput.NVOutputResult, userPaymentOptionId: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CreditCardFieldViewModel {
  public static func modelForRN() -> NuveiSimplyConnectSDK.CreditCardFieldViewModel
  public func parseCreditCardInfo(input: NuveiSimplyConnectSDK.CreditCardInput, hasFocus: Swift.Bool = false, ignoreEmpty: Swift.Bool = true)
  public func tokenize(input: NuveiSimplyConnectSDK.CreditCardInput, transactionDetails: NuveiSimplyConnectSDK.CheckoutTransactionDetails, callback: @escaping (Swift.String?, Swift.String?) -> ()) throws
  @objc deinit
}
extension Swift.String {
  public var formatAsCreditCardNumber: Swift.String {
    get
  }
  public var formatAsDate: Swift.String {
    get
  }
  public func formatAsCVV(length: Swift.Int) -> Swift.String
  public var asBase64Image: Swift.String? {
    get
  }
}
public protocol NVUIOwner {
  func getNVUIOwnerViewController() -> UIKit.UIViewController
}
extension UIKit.UIViewController : NuveiSimplyConnectSDK.NVUIOwner {
  @_Concurrency.MainActor @preconcurrency public func getNVUIOwnerViewController() -> UIKit.UIViewController
}
@available(iOS 13.0, *)
extension UIKit.UIApplication : NuveiSimplyConnectSDK.NVUIOwner {
  @_Concurrency.MainActor @preconcurrency public func getNVUIOwnerViewController() -> UIKit.UIViewController
}
@_hasMissingDesignatedInitializers public class NuveiSimplyConnect {
  public enum Environment {
    case production, integration
    public static func == (a: NuveiSimplyConnectSDK.NuveiSimplyConnect.Environment, b: NuveiSimplyConnectSDK.NuveiSimplyConnect.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CheckoutCompletionAction {
    case dismiss
    case backToCheckout
    public static func == (a: NuveiSimplyConnectSDK.NuveiSimplyConnect.CheckoutCompletionAction, b: NuveiSimplyConnectSDK.NuveiSimplyConnect.CheckoutCompletionAction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias CheckoutCompletion = (NuveiSimplyConnectSDK.NuveiSimplyConnect.CheckoutCompletionAction) -> ()
  public typealias DeclineFallbackDecisionCallback = (NuveiSimplyConnectSDK.NVCreatePaymentOutput, UIKit.UIViewController, @escaping NuveiSimplyConnectSDK.NuveiSimplyConnect.CheckoutCompletion) -> ()
  public static let sdkVersion: Swift.String
  public static var environment: NuveiSimplyConnectSDK.NuveiSimplyConnect.Environment?
  public static var customization: NuveiSimplyConnectSDK.NuveiUICustomization?
  public static func setup(environment: NuveiSimplyConnectSDK.NuveiSimplyConnect.Environment = .production, customization: NuveiSimplyConnectSDK.NuveiUICustomization = NuveiUICustomization())
  public static func authenticate3d(uiOwner: any NuveiSimplyConnectSDK.NVUIOwner, input: NuveiSimplyConnectSDK.NVInput, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, callback: @escaping (NuveiSimplyConnectSDK.NVAuthenticate3dOutput) -> ())
  public static func tokenize(input: NuveiSimplyConnectSDK.NVInput, callback: @escaping (Swift.String?, NuveiSimplyConnectSDK.NVFailure?) -> ())
  public static func createPayment(uiOwner: any NuveiSimplyConnectSDK.NVUIOwner, input: NuveiSimplyConnectSDK.NVInput, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, callback: @escaping (NuveiSimplyConnectSDK.NVCreatePaymentOutput) -> ())
  public static func checkout(uiOwner: any NuveiSimplyConnectSDK.NVUIOwner, authenticate3dInput: NuveiSimplyConnectSDK.NVInput, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, callback: @escaping (NuveiSimplyConnectSDK.NVCreatePaymentOutput) -> (), declineFallbackDecision: NuveiSimplyConnectSDK.NuveiSimplyConnect.DeclineFallbackDecisionCallback?)
  public static func getEnvBaseUrl() -> Swift.String
  @objc deinit
}
public class NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont, textColor: UIKit.UIColor)
  @objc deinit
}
extension NuveiSimplyConnectSDK.NuveiButtonType : Swift.Equatable {}
extension NuveiSimplyConnectSDK.NuveiButtonType : Swift.Hashable {}
extension NuveiSimplyConnectSDK.InputError : Swift.Equatable {}
extension NuveiSimplyConnectSDK.InputError : Swift.Hashable {}
extension NuveiSimplyConnectSDK.InputError : Swift.RawRepresentable {}
extension NuveiSimplyConnectSDK.NVOutput.NVOutputResult : Swift.Equatable {}
extension NuveiSimplyConnectSDK.NVOutput.NVOutputResult : Swift.Hashable {}
extension NuveiSimplyConnectSDK.NVOutput.NVOutputResult : Swift.RawRepresentable {}
extension NuveiSimplyConnectSDK.NVOutput.NVOutputInternalResult : Swift.Equatable {}
extension NuveiSimplyConnectSDK.NVOutput.NVOutputInternalResult : Swift.Hashable {}
extension NuveiSimplyConnectSDK.NVOutput.NVOutputInternalResult : Swift.RawRepresentable {}
extension NuveiSimplyConnectSDK.NuveiSimplyConnect.Environment : Swift.Equatable {}
extension NuveiSimplyConnectSDK.NuveiSimplyConnect.Environment : Swift.Hashable {}
extension NuveiSimplyConnectSDK.NuveiSimplyConnect.CheckoutCompletionAction : Swift.Equatable {}
extension NuveiSimplyConnectSDK.NuveiSimplyConnect.CheckoutCompletionAction : Swift.Hashable {}
